//// slim v.3.6 code to simulate alpha, omegaA & omegaNA in differently sized populations with sexual reproduction every 8th generation
// adjust K to the desired size 

// initiallize everything
initialize() {
	
	initializeSLiMModelType(modelType="nonWF"); // is an asexual model by default
	defineGlobal("K", 100); // carrying capacity per subpop
	
	initializeMutationRate(1e-8); // mutation rate
	
	initializeMutationType("m1", 0.5, "f", 0.0);         // synonymous
	m1.convertToSubstitution = F;
	initializeMutationType("m2", 0.5, "f", 0.0001);         // beneficial
	m2.convertToSubstitution = F;
	initializeMutationType("m3", 0.1, "g", -0.03, 0.2);  // mildly deleterious
	m3.convertToSubstitution = F;
	
	initializeGenomicElementType("g1", c(m1,m2,m3), c(1,0.015,0.985));  // exon
	
	// Generate 100000-base chromosome
	initializeGenomicElement(g1, 0, 1000000);
	
	initializeRecombinationRate(1e-8);
}

reproduction() {
	// every 8th generation do sexual reproduction
	if (sim.generation % 8 == 0)
	{
		// generate each offspring with an independently drawn mate
		mate = subpop.sampleIndividuals(1, exclude=individual);
		if (mate.size())
			subpop.addCrossed(individual, mate);
	}
	// the rest of the time do clonal reproduction
	else
	{
		subpop.addCloned(individual);
	}
}

// create a population of 10000 individuals in generation 1
1 {
	sim.addSubpop("p1", K);
}

early() {
	// density-dependence
	for (subpop in sim.subpopulations) {
		subpop.fitnessScaling = K / subpop.individualCount;
	}
}

// run to generation 100000
100000 late() {
	// counts:
	
	// m1 (=syn) substitutions
	D0=length(asString(p1.genomes.mutationFrequenciesInGenomes(unique(p1.genomes.mutations[p1.genomes.mutations.mutationType.id==1])))[asString(p1.genomes.mutationFrequenciesInGenomes(unique(p1.genomes.mutations[p1.genomes.mutations.mutationType.id==1]))) == 1]);
	
	// m2&m3 (=nonsyn) substitutions
	D1=length(asString(p1.genomes.mutationFrequenciesInGenomes(unique(p1.genomes.mutations[p1.genomes.mutations.mutationType.id==2 | p1.genomes.mutations.mutationType.id==3])))[asString(p1.genomes.mutationFrequenciesInGenomes(unique(p1.genomes.mutations[p1.genomes.mutations.mutationType.id==2 | p1.genomes.mutations.mutationType.id==3]))) == 1]);
	
	
	// m1 (=syn) polymorphisms
	P0=length(asString(p1.genomes.mutationFrequenciesInGenomes(unique(p1.genomes.mutations[p1.genomes.mutations.mutationType.id==1])))[asString(p1.genomes.mutationFrequenciesInGenomes(unique(p1.genomes.mutations[p1.genomes.mutations.mutationType.id==1]))) != 1]);
	
	// m2&m3 (=nonsyn) polymorphisms
	P1=length(asString(p1.genomes.mutationFrequenciesInGenomes(unique(p1.genomes.mutations[p1.genomes.mutations.mutationType.id==2 | p1.genomes.mutations.mutationType.id==3])))[asString(p1.genomes.mutationFrequenciesInGenomes(unique(p1.genomes.mutations[p1.genomes.mutations.mutationType.id==2 | p1.genomes.mutations.mutationType.id==3]))) != 1]);
	
	alpha=1-((D0*P1)/(D1*P0));
	omegaA=alpha*((D1/100000)/(D0/100000));
	omegaNA=(1-alpha)*((D1/100000)/(D0/100000));
	
	sim.outputFixedMutations(); // get substitutions
	sim.simulationFinished();   // finish run

	cat(paste(K, calcHeterozygosity(p1.genomes, p1.genomes.mutationsOfType(m1)), alpha, omegaA, omegaNA, getSeed(), "\n", sep=", "));
	line = paste(K, calcHeterozygosity(p1.genomes, p1.genomes.mutationsOfType(m1)), alpha, omegaA, omegaNA, getSeed(), sep=", ");
	
	writeFile("sim_alpha_auto.csv", line, append=T);

}
